// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fK4qwMyg2PyiHXLCzS8ypM
// Component: wf-gqVD0N3dgko
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: eMmCFjLHgeotL/component
import TextInput from "../../TextInput"; // plasmic-import: Zah1i5owdpzz9Q/component

import { useScreenVariants as useScreenVariantsa1IuO1Yac82YnY } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: A1IuO1Yac82ynY/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_next_feed_presell_ai_test.module.css"; // plasmic-import: fK4qwMyg2PyiHXLCzS8ypM/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: wf-gqVD0N3dgko/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: b1_RAVVKntT2-M/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: I6vVbzclRDQ_uw/icon
import UsersvgIcon from "./icons/PlasmicIcon__Usersvg"; // plasmic-import: ei0vW2VDd_0xt1/icon
import CartsvgIcon from "./icons/PlasmicIcon__Cartsvg"; // plasmic-import: KFO8oH55IRkNLc/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: kNrUW7zFl9UUMn/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: FcpOaPEibfVNTY/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: NutLM_Ojr_EH7J/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: qYqq-zUKBNW7d5/icon
import Searchsvg2Icon from "./icons/PlasmicIcon__Searchsvg2"; // plasmic-import: GSV1rmzf2Fot2n/icon

export type PlasmicHome__VariantMembers = {};
export type PlasmicHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>();

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: p.Flex<"div">;
  nav?: p.Flex<"nav">;
  h1?: p.Flex<"h1">;
  textInput?: p.Flex<typeof TextInput>;
  textbox?: p.Flex<typeof TextInput>;
};

export interface DefaultHomeProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsa1IuO1Yac82YnY()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <nav
            data-plasmic-name={"nav"}
            data-plasmic-override={overrides.nav}
            className={classNames(projectcss.all, sty.nav)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__zgKLr)}>
              <div className={classNames(projectcss.all, sty.columns__cVt1D)}>
                <div className={classNames(projectcss.all, sty.column__rnnr1)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___0Nakr)}
                  >
                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__to2Bz
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__el3Ss)}
                          role={"img"}
                        />
                      ) : null}

                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__sbvBw
                        )}
                        component={Link}
                        href={`/`}
                        platform={"nextjs"}
                      >
                        {"Home"}
                      </p.PlasmicLink>

                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__bHnv)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>

                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__yoPaa
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <IconIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___8EulP
                          )}
                          role={"img"}
                        />
                      ) : null}

                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__ynn7A
                        )}
                        component={Link}
                        href={`/blog-landing`}
                        platform={"nextjs"}
                      >
                        {"Blog"}
                      </p.PlasmicLink>

                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__ht1W)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                  </p.Stack>
                </div>

                <div className={classNames(projectcss.all, sty.column___5Yo6Y)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__y7RQz)}
                    displayHeight={"100%" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"170px" as const}
                    src={{
                      src: "/plasmic/next_feed_presell_ai_test/images/image39.svg",
                      fullWidth: 300,
                      fullHeight: 105,
                      aspectRatio: 2.864865
                    }}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.column__wl5Sa)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___1DWny)}
                  >
                    {true ? (
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__t6Cb
                        )}
                        component={Link}
                        href={"#" as const}
                        platform={"nextjs"}
                      >
                        <SearchsvgIcon
                          className={classNames(projectcss.all, sty.svg__srol6)}
                          role={"img"}
                        />
                      </p.PlasmicLink>
                    ) : null}
                    {true ? (
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__dm0Uh
                        )}
                        component={Link}
                        href={"#" as const}
                        platform={"nextjs"}
                      >
                        <UsersvgIcon
                          className={classNames(projectcss.all, sty.svg__ffC2R)}
                          role={"img"}
                        />
                      </p.PlasmicLink>
                    ) : null}
                    {true ? (
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link___53Mcw
                        )}
                        component={Link}
                        href={"#" as const}
                        platform={"nextjs"}
                      >
                        <CartsvgIcon
                          className={classNames(projectcss.all, sty.svg__np16M)}
                          role={"img"}
                        />
                      </p.PlasmicLink>
                    ) : null}
                  </div>
                </div>
              </div>
            </div>
          </nav>

          {true ? (
            <section className={classNames(projectcss.all, sty.section__z9NlQ)}>
              <div className={classNames(projectcss.all, sty.freeBox__iblOg)}>
                <div className={classNames(projectcss.all, sty.columns__u2Eb)}>
                  <div
                    className={classNames(projectcss.all, sty.column___0Za14)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___4FjP1
                      )}
                    >
                      <h1
                        data-plasmic-name={"h1"}
                        data-plasmic-override={overrides.h1}
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "We started with humble beginnings"
                          : "Coming Soon"}
                      </h1>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qFCwb
                        )}
                      >
                        {"19 - 02 - 2023"}
                      </div>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.columns__tw7Jx
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column___1Ku2Y
                          )}
                        >
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__z220I
                            )}
                          >
                            <h2
                              className={classNames(
                                projectcss.all,
                                projectcss.h2,
                                projectcss.__wab_text,
                                sty.h2__wlfj4
                              )}
                            >
                              {"32"}
                            </h2>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__wnnXc
                              )}
                            >
                              {"Days"}
                            </div>
                          </p.Stack>
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column___2CQfQ
                          )}
                        >
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__jgdoF
                            )}
                          >
                            <h2
                              className={classNames(
                                projectcss.all,
                                projectcss.h2,
                                projectcss.__wab_text,
                                sty.h2__epTzk
                              )}
                            >
                              {"22"}
                            </h2>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__loCin
                              )}
                            >
                              {"Hours"}
                            </div>
                          </p.Stack>
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__rVzWd
                          )}
                        >
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__qPizY
                            )}
                          >
                            <h2
                              className={classNames(
                                projectcss.all,
                                projectcss.h2,
                                projectcss.__wab_text,
                                sty.h2__phHgo
                              )}
                            >
                              {"16"}
                            </h2>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__vemam
                              )}
                            >
                              {"Mintutes"}
                            </div>
                          </p.Stack>
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__lzTg5
                          )}
                        >
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__s7C8I
                            )}
                          >
                            <h2
                              className={classNames(
                                projectcss.all,
                                projectcss.h2,
                                projectcss.__wab_text,
                                sty.h2___03ClY
                              )}
                            >
                              {"32"}
                            </h2>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___9Akvg
                              )}
                            >
                              {"Sec"}
                            </div>
                          </p.Stack>
                        </div>
                      </p.Stack>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__lbly9
                        )}
                      >
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__uqAP
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__gp6Sf
                            )}
                            color={"sand" as const}
                            endIcon={
                              <ChecksvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__qjwpF
                                )}
                                role={"img"}
                              />
                            }
                            link={`/blog-landing`}
                            size={"compact" as const}
                            startIcon={
                              <ChecksvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__sKbSg
                                )}
                                role={"img"}
                              />
                            }
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___3ZnXi
                              )}
                            >
                              {"Blog"}
                            </div>
                          </Button>
                        </p.PlasmicLink>
                      </div>
                    </p.Stack>
                  </div>
                </div>
              </div>
            </section>
          ) : null}

          <section className={classNames(projectcss.all, sty.section__vceRe)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__zh9J3)}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__eqio1
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "Top Collections"
                  : "Click Below Link To Show Blogs Here"}
              </h2>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__d1GGp
                )}
                component={Link}
                href={`/blog-landing`}
                platform={"nextjs"}
              >
                {"Click Here For New Blogs"}
              </p.PlasmicLink>
            </p.Stack>
          </section>

          <div className={classNames(projectcss.all, sty.freeBox___5Lwqi)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__wXOjP)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__fvnIf)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__k7Bhx)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"120px" as const}
                  src={{
                    src: "/plasmic/next_feed_presell_ai_test/images/image39.svg",
                    fullWidth: 300,
                    fullHeight: 105,
                    aspectRatio: 2.864865
                  }}
                />

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__t6N1I)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ukcoZ
                    )}
                  >
                    {
                      "Lorem Ipsum Dolor Sit Amet, Consectetur Adipiscing Lorem Ipsum Dolor Sit Amet, Consectetur ."
                    }
                  </div>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__cdKaw)}
                  >
                    <Icon3Icon
                      className={classNames(projectcss.all, sty.svg__bp6MU)}
                      role={"img"}
                    />

                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg___4SwUa)}
                      role={"img"}
                    />

                    <Icon28Icon
                      className={classNames(projectcss.all, sty.svg___5BS0X)}
                      role={"img"}
                    />
                  </p.Stack>
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__fMuha)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__wvUxx
                  )}
                >
                  {"SUPPORT"}
                </h3>

                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__bbxae
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg___48Q3O)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__s1Amp
                    )}
                  >
                    {"FAQ"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__wvElN)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__nelMv
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__tkUZe)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__skIQh
                    )}
                  >
                    {"Shipping"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__qwWzL)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__yoYCw
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__wdQne)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nCgIq
                    )}
                  >
                    {"Returns + Exchanges"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__qghcq)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__mmont
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__rYnl)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mYm7J
                    )}
                  >
                    {"Contact Us"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__s8J5V)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jkZkz)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__va4X5
                  )}
                >
                  {"COMPANY"}
                </h3>

                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___91PLa
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__pybjM)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___64NxT
                    )}
                  >
                    {"Our Mission"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__nuTeS)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__uljck
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__ufE4Z)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gWp0
                    )}
                  >
                    {"Sustainability"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__hOhzJ)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__eKZce
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__gwl5U)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dnOlb
                    )}
                  >
                    {"Stores"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__hax6K)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__yt3Se
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__jwqVo)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dwhot
                    )}
                  >
                    {"Careers"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__c8HHu)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__cuzJe)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__m1IC1
                  )}
                >
                  {"Newsletter"}
                </h3>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__thdDe
                  )}
                >
                  {"Lorem ipsum dolor sit amet, "}
                </div>

                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__zIm4F)}
                  >
                    <TextInput
                      data-plasmic-name={"textInput"}
                      data-plasmic-override={overrides.textInput}
                      className={classNames("__wab_instance", sty.textInput)}
                      endIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__abWtE)}
                          role={"img"}
                        />
                      }
                      placeholder={"Enter email  address" as const}
                      startIcon={
                        <Searchsvg2Icon
                          className={classNames(projectcss.all, sty.svg__h8FwZ)}
                          role={"img"}
                        />
                      }
                    />

                    <Button
                      className={classNames("__wab_instance", sty.button__tjZF)}
                      color={"sand" as const}
                      endIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg___3M9G)}
                          role={"img"}
                        />
                      }
                      size={"compact" as const}
                      startIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__fwsBx)}
                          role={"img"}
                        />
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pWLw
                        )}
                      >
                        {"SUbscribe"}
                      </div>
                    </Button>
                  </p.Stack>
                ) : null}
              </p.Stack>
            </p.Stack>
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "nav", "h1", "textInput", "textbox"],
  nav: ["nav"],
  h1: ["h1"],
  textInput: ["textInput", "textbox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  nav: "nav";
  h1: "h1";
  textInput: typeof TextInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHome__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    nav: makeNodeComponent("nav"),
    h1: makeNodeComponent("h1"),
    textInput: makeNodeComponent("textInput"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
